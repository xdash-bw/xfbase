* 模块
- vector
  数组。动态和自动扩容，底层是字节流，用宏封装类型转换实现泛型，非常巧妙的设计。优点是代码非常简单精简，缺点是没有强类型约束。（这个其实有点像薛定谔的猫，没有强类型约束容易被玩坏，但是 STL 简单清晰多的多的代码，又减少了犯错的可能。
- list
  参考 linux 内核实现的经典的 list_head 链表，侵入式链表，足够高效的同时又泛型。个人认为比 std::vector 好多了，除了做纯数据的 buffer 外。用来存储对象引用，两者遍历效率差不多，但是 list_head 拥有任意节点 O(1) 的插入和删除时间复杂度，尤其是任何位置都能 O(1) 移除，比 std::list<> 好多了，配合红黑树，可以做到高效地查找 + 删除。
- array
  数组，底层是 vector. 专门用来存储外部对象的指针，并不负责外部对象的生命周期管理

  就是 std::vector<T*> 。
- page_stream

* 开发记录
- 已经完成 list 和红黑树的最基本功能，后续可能会继续添加功能，特别是 list, 和内核的差太多

- page stream 只是完成几个接口，离全部还差点，完成必须跑起来
  - 把最基础的读，写接口完成了，但是似乎有 bug, 无法通过正常运行

- vector
  - 理解其基本架构
    - 定义数据
    - 基本的几个功能
        init, destory, push, pop, resize, __capacity, reserve
    - access methods
        vector_data, vector_size, vactor_capacity
    - 用宏封装完成以上功能，变成取对象，而不是取 *纯数据*

- 新一步理解并且添加注释

- array
  - 理解其基本架构
    - 定义数据
    - 基本的几个功能
      init, destory, push, pop, __update
    - access methods
      data, index, size


* 用 c 写的基础库
** c 项目用的数据结构
: 收集一些，方便集成，同时自己也要多练，尽量保证可以自己写
*** 顺序表
**** 侵入式的通用（泛型结构体，对象）表
+ 多功能顺序表，可用作队列，存储结构体对象，遍历等
  + 对于遍历来说
   把对象引用 / 指针存储在 vector 中，则具有 vector 一样的遍历效果

  + 对于插入删除来说
    能 O(1) 插入和删除，又能嵌入到红黑树里，方便遍历找到节点

+ 其不适合作为纯数据的缓存容器，但是可以作为构成上层的 page_stream 的
***** list_head

**** 存储数据的缓存区
***** page_stream
****** Skywind3000/AsyncNet

***** Ringbuffer
****** Linux 内核的 kfifo

*** 查找
**** 树
***** 红黑树
****** avlmini 里面的红黑树（其实也是取自 linux 内核红黑树）
***** avl 树
****** avlmini 里面的 avl 树
**** 查找哈希表
***** Linux 内核

**** 时间轮 O(1)
***** Skywind3000 AsyncNet
